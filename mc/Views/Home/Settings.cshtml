@using DecisionServicePrivateWeb;
@using DecisionServicePrivateWeb.Models
@using DecisionServicePrivateWeb.Controllers
@using System.Text.RegularExpressions;
@model List<SettingItemViewModel>
@{
    ViewBag.Title = "Settings";
}
<h2 class="ds-title">@ViewBag.Title</h2>

<div class="container-fluid">
    @using (Html.BeginForm("Settings", "Home", FormMethod.Post, new { @class = "form-horizontal ds-form", role = "form" }))
    {
        @Html.AntiForgeryToken()

        foreach (var item in Model)
        {
            var readOnlyStyle = item.IsEditable == true ? string.Empty : "readonly=readonly";
            <div class="form-group">
                <label for="@item.Name" class="col-sm-2 control-label ds-label">@item.DisplayName</label>
                <div class="col-sm-10">
                    @if (item.IsSplotlightUrl == true)
                    {
                        <a id="@item.Name" style="overflow: hidden" class="btn btn-primary outline form-control helptext-on-interaction" href="@item.Url" target="_blank">@item.Value</a>
                    }
                    else
                    {
                        if (item.Value != null)
                        {
                            switch (item.Value.GetType().Name)
                            {
                                case "String":
                                case "Int32":
                                case "Single":
                                case "DecisionType":
                                case "TrainFrequency":
                                    <input type="text" @readOnlyStyle style="display:inline;" class="form-control helptext-on-interaction" id="@item.Name" name="@item.Name" value="@item.Value" />
                                    break;
                                case "Boolean":
                                    @Html.CheckBox(item.Name, (bool)item.Value, new { @id = item.Name, @class = "helptext-on-interaction", @style = "display:inline" })
                                    break;
                                case "SettingBlobListViewModel":
                                    var listView = (SettingBlobListViewModel)item.Value;
                                    @Html.DropDownList(item.Name, listView.Items.Select(i => new SelectListItem
                                        {
                                            Value = i.Name,
                                            Text = String.IsNullOrEmpty(i.LastModifiedRelativeTime) ? i.Name : i.Name + " - " + i.LastModifiedRelativeTime,
                                            Selected = i.Name == listView.SelectedItem
                                        }),
                                        new { @id = item.Name, @class = "form-control helptext-on-interaction", @style = "display:inline" })
                                    break;
                                default:
                                    break;
                            }
                        }
                        if (!string.IsNullOrEmpty(item.Url))
                        {
                            if (item.Value != null)
                            {
                                // Side link
                                <a href="@item.Url" target="_blank" title="View">@Html.Partial("_OpenSvg")</a>
                            }
                            else
                            {
                                // Main link
                                <a id="@item.Name" class="btn btn-primary outline form-control helptext-on-interaction" href="@item.Url" target="_blank">@item.Value</a>
                            }
                        }
                        if (item.Value != null && item.IsResettable == true)
                        {
                            <a name="@item.Name" href="#" class="resetter">@Html.Partial("_ResetSvg")</a>
                        }
                    }
                </div>
            </div>
        }
        <div class="form-group">
            <label class="col-sm-2 control-label ds-label"></label>
            <div class="col-sm-10" style="text-align:left;">
                <button class="btn btn-primary outline">Save</button>
            </div>
        </div>

        foreach (var item in Model)
        {
            if (item.IsEditable == true)
            {
                @Html.ValidationMessage(item.Name);
            }
        }

        foreach (var item in Model)
        {
            <div id="div-sv-@item.Name" class="row glossary" style="display:none;">
                <div class="col-md-12">
                    <h4 class="ds-title">@item.DisplayName</h4>
                    <p>@item.HelpText</p>
                </div>
            </div>
        }
    }
</div>